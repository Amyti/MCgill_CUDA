[amir@amyti Proj_Neur]$ python test_addition_cuda.py 
Traceback (most recent call last):
  File "/home/amir/Proj_Neur/test_addition_cuda.py", line 1, in <module>
    import torch
ModuleNotFoundError: No module named 'torch'
[amir@amyti Proj_Neur]$ pip install torch
error: externally-managed-environment

× This environment is externally managed
╰─> To install Python packages system-wide, try 'pacman -S
    python-xyz', where xyz is the package you are trying to
    install.
    
    If you wish to install a non-Arch-packaged Python package,
    create a virtual environment using 'python -m venv path/to/venv'.
    Then use path/to/venv/bin/python and path/to/venv/bin/pip.
    
    If you wish to install a non-Arch packaged Python application,
    it may be easiest to use 'pipx install xyz', which will manage a
    virtual environment for you. Make sure you have python-pipx
    installed via pacman.

note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.
hint: See PEP 668 for the detailed specification.
[amir@amyti Proj_Neur]$ pip install python-torch
error: externally-managed-environment

× This environment is externally managed
╰─> To install Python packages system-wide, try 'pacman -S
    python-xyz', where xyz is the package you are trying to
    install.
    
    If you wish to install a non-Arch-packaged Python package,
    create a virtual environment using 'python -m venv path/to/venv'.
    Then use path/to/venv/bin/python and path/to/venv/bin/pip.
    
    If you wish to install a non-Arch packaged Python application,
    it may be easiest to use 'pipx install xyz', which will manage a
    virtual environment for you. Make sure you have python-pipx
    installed via pacman.

note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.
hint: See PEP 668 for the detailed specification.
[amir@amyti Proj_Neur]$ 


import torch
import time

#N = 500_000_000  
M, N, K = 10000, 10000, 10000
A = torch.rand(M, K)
B = torch.rand(K, N)
#a_cpu = torch.rand(N)
#b_cpu = torch.rand(N)

start_cpu = time.time()
#c_cpu = a_cpu + b_cpu
C = torch.matmul(A, B) 
end_cpu = time.time()

print(f"CPU : {end_cpu - start_cpu:.6f} secondes")
nb_op = 2*M*N*K

flops = nb_op / (end_cpu - start_cpu)
print(f'{flops:.2e} FLOPS')

if torch.cuda.is_available():
    A_gpu = A.to('cuda')
    B_gpu = B.to('cuda')

    #a_gpu = a_cpu.to('cuda')  
    #b_gpu = b_cpu.to('cuda')

    torch.cuda.synchronize()

    start_gpu = time.time()
    #c_gpu = a_gpu + b_gpu

    C = torch.matmul(A, B)
    torch.cuda.synchronize()  
    end_gpu = time.time()

    print(f"GPU CUDA : {end_gpu - start_gpu:.6f} secondes")

    nb_op = 2*M*N*K

    flops = nb_op / (end_gpu - start_gpu)
    print(f'{flops:.2e} FLOPS')
    


else:
    print("CUDA non disponible sur cette machine.")
