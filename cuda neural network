import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# Préparation des données MNIST
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])
trainset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
trainloader = DataLoader(trainset, batch_size=64, shuffle=True)

# Modèle MLP simple
class MLP(nn.Module):
    def __init__(self):
        super().__init__()
        self.model = nn.Sequential(
            nn.Flatten(),
            nn.Linear(28*28, 128),
            nn.ReLU(),
            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Linear(64, 10)
        )

    def forward(self, x):
        return self.model(x)

# Entraînement d'un modèle avec un optimiseur donné
def train_model(optimizer_class, name, epochs=10):
    model = MLP()
    criterion = nn.CrossEntropyLoss()
    optimizer = optimizer_class(model.parameters(), lr=0.01)
    losses = []

    for _ in range(epochs):
        model.train()
        running_loss = 0.0
        for images, labels in trainloader:
            outputs = model(images)
            loss = criterion(outputs, labels)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
        losses.append(running_loss / len(trainloader))
    return losses

# Comparaison des trois optimiseurs
optimizers = {
    'SGD': optim.SGD,
    'Adam': optim.Adam,
    'ASGD': optim.ASGD
}

results = {}
for name, opt_class in optimizers.items():
    results[name] = train_model(opt_class, name)

# Affichage des courbes de perte
plt.figure(figsize=(10, 6))
for name, losses in results.items():
    plt.plot(losses, label=name)
plt.xlabel("Époques")
plt.ylabel("Perte moyenne")
plt.title("Comparaison des optimiseurs (MNIST)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

raceback (most recent call last):
  File "/home/amir/Proj_Neur/cuda.py", line 63, in <module>
    plt.plot(losses, label=name)
                    ^^^^^^^^^^^^
  File "/home/amir/Proj_Neur/cuda.py", line 42, in train_model
  File "/home/amir/neuralnetwork/lib/python3.13/site-packages/torch/utils/data/dataloader.py", line 729, in __next__
    with torch.autograd.profiler.record_function(self._profile_name):
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
  File "/home/amir/neuralnetwork/lib/python3.13/site-packages/torch/autograd/profiler.py", line 776, in __exit__
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any):
    
KeyboardInterrupt

