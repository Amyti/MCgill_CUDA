import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# Préparation des données MNIST
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])
trainset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
trainloader = DataLoader(trainset, batch_size=64, shuffle=True)

# Modèle simple : MLP avec 2 couches cachées
class MLP(nn.Module):
    def __init__(self):
        super().__init__()
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(28*28, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.flatten(x)
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Fonction d'entraînement
def entrainer(optimiseur_type, epochs=10):
    model = MLP()
    loss_fn = nn.CrossEntropyLoss()
    optimiseur = optimiseur_type(model.parameters(), lr=0.01)
    pertes = []

    for _ in range(epochs):
        model.train()
        perte_totale = 0
        for images, labels in trainloader:
            pred = model(images)
            perte = loss_fn(pred, labels)

            optimiseur.zero_grad()
            perte.backward()
            optimiseur.step()

            perte_totale += perte.item()
        pertes.append(perte_totale / len(trainloader))
    return pertes

# Liste des optimiseurs à tester
types_optimiseurs = {
    "SGD": optim.SGD,
    "Adam": optim.Adam,
    "ASGD": optim.ASGD
}

# Lancer l'entraînement pour chaque optimiseur
resultats = {}
for nom, opt in types_optimiseurs.items():
    resultats[nom] = entrainer(opt)

# Afficher les courbes de perte
plt.figure(figsize=(10, 6))
for nom, pertes in resultats.items():
    plt.plot(pertes, label=nom)
plt.xlabel("Époques")
plt.ylabel("Perte moyenne")
plt.title("Comparaison des optimiseurs")
plt.legend()
plt.grid(True)
plt.show()
