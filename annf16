import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from tqdm import tqdm
import time

torch.backends.cudnn.benchmark = True

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Device: {device}")

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

testset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=512, shuffle=False)

class sANN(nn.Module):
    def __init__(self):
        super(sANN, self).__init__()
        self.fc1 = nn.Linear(28*28, 256)
        self.dropout1 = nn.Dropout(0.2)
        self.fc2 = nn.Linear(256, 128)
        self.dropout2 = nn.Dropout(0.2)
        self.fc3 = nn.Linear(128, 10)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = torch.relu(self.dropout1(self.fc1(x)))
        x = torch.relu(self.dropout2(self.fc2(x)))
        return self.fc3(x)

def entrainement():
    model = sANN().to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=1e-3)
    trainset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=512, shuffle=True)

    model.train()
    for epoch in tqdm(range(1), desc="Training"):
        for images, labels in trainloader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            output = model(images)
            loss = criterion(output, labels)
            loss.backward()
            optimizer.step()

    torch.save(model.state_dict(), "poids.pth")
    return model

def test_inference(model, dtype=torch.float32, warmup=10, runs=100):

    model.eval().to(device)
    if dtype == torch.float16:
        model.half()              

    images, _ = next(iter(testloader))
    images = images.to(device)
    if dtype == torch.float16:
        images = images.half()      

    torch.cuda.empty_cache()
    torch.cuda.synchronize()
    base_bloc = torch.cuda.memory_stats().get("active.all.current", 0)

    base_mem = torch.cuda.memory_allocated()

    torch.cuda.reset_peak_memory_stats()
    torch.cuda.synchronize()

    for _ in range(warmup):
        with torch.no_grad():
            model(images)
    torch.cuda.synchronize()

    start = time.time()
    for _ in range(runs):
        with torch.no_grad():
            model(images)
    torch.cuda.synchronize()
    end = time.time()

    pique_bloc = torch.cuda.memory_stats().get("active.all.peak", 0)
    pique_mem = torch.cuda.max_memory_allocated()

    inf_mem_MB = (pique_mem - base_mem) / (1024**2)
    temp = (end - start) / runs
    bloc_utilise = pique_bloc - base_bloc
    bon = 0
    total = 0
    with torch.no_grad():
        for image, rep in testloader:
            image, rep = image.to(device), rep.to(device)
            if dtype == torch.float16:
                image = image.half()
            outputs = model(image)
            prediction = outputs.argmax(dim=1)
            bon += (prediction == rep).sum().item()
            total += rep.size(0)
    accuracy = 100* bon / total

    print(f"=== inference {dtype} ===")
    print(f"accuracy: {accuracy:.2f}%")
    print(f"peak memory : {pique_mem / (1024**2):.2f} MB")
    print(f"time for the forward part : {temp:.6f} s en moyenne sur {runs} runs\n")

model32 = entrainement()

print("float32")
model32.load_state_dict(torch.load("poids.pth"))
test_inference(model32, torch.float32)

print("float16")
model16 = sANN()
model16.load_state_dict(torch.load("poids.pth"))
test_inference(model16, torch.float16)
