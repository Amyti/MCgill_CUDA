import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from tqdm import tqdm
import time

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Device: {device}")

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

testset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=128, shuffle=False)

class sANN(nn.Module):
    def __init__(self):
        super(sANN, self).__init__()
        self.fc1 = nn.Linear(28*28, 256)
        self.dropout1 = nn.Dropout(0.2)
        self.fc2 = nn.Linear(256, 128)
        self.dropout2 = nn.Dropout(0.2)
        self.fc3 = nn.Linear(128, 10)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = torch.relu(self.dropout1(self.fc1(x)))
        x = torch.relu(self.dropout2(self.fc2(x)))
        return self.fc3(x)

def entrainement():
    model = sANN().to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    trainset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=128, shuffle=True)

    model.train()
    for epoch in tqdm(range(1), desc="Training"):
        for images, labels in trainloader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            output = model(images)
            loss = criterion(output, labels)
            loss.backward()
            optimizer.step()
    return model

def test_inference(model, dtype=torch.float32):
    model.eval()
    model = model.to(device).to(dtype=dtype)

    images, labels = next(iter(testloader))
    images = images.to(device).to(dtype=dtype)
    labels = labels.to(device)

    torch.cuda.empty_cache()
    torch.cuda.reset_peak_memory_stats()

    with torch.no_grad():
        torch.cuda.synchronize()
        start_time = time.time()
        _ = model(images)
        torch.cuda.synchronize()
        end_time = time.time()

    stats = torch.cuda.memory_stats()
    mem_allocated = stats["allocated_bytes.all.current"] / 1024**2
    blocks_active = stats["active.all.current"]
    inference_time = end_time - start_time

    print(f"üß† M√©moire allou√©e : {mem_allocated:.2f} MB")
    print(f"üì¶ Blocs actifs CUDA : {blocks_active}")
    print(f"‚è±Ô∏è Temps d'inf√©rence : {inference_time:.4f} s")

model = entrainement()
torch.save(model.state_dict(), "poids.pth")

print("\n=== Inf√©rence FLOAT32 ===")
model.load_state_dict(torch.load("poids.pth"))
test_inference(model, torch.float32)

print("\n=== Inf√©rence FLOAT16 ===")
model_fp16 = sANN().half().to(device)
model_fp16.load_state_dict(torch.load("poids.pth"))
test_inference(model_fp16, torch.float16)
