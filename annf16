import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from tqdm import tqdm
import time
import os

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Device: {device}")

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])
testset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=512, shuffle=False)

class sANN(nn.Module):
    def __init__(self):
        super(sANN, self).__init__()
        self.fc1 = nn.Linear(28*28, 256)
        self.dropout1 = nn.Dropout(0.2)
        self.fc2 = nn.Linear(256, 128)
        self.dropout2 = nn.Dropout(0.2)
        self.fc3 = nn.Linear(128, 10)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = torch.relu(self.dropout1(self.fc1(x)))
        x = torch.relu(self.dropout2(self.fc2(x)))
        return self.fc3(x)

def entrainement():
    model = sANN().to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    trainset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=512, shuffle=True)

    model.train()
    for epoch in tqdm(range(2), desc="Training"):
        for images, labels in trainloader:
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            output = model(images)
            loss = criterion(output, labels)
            loss.backward()
            optimizer.step()
    return model

def test_inference(model, dtype=torch.float32):
    model = model.to(dtype=dtype)
    correct = 0
    total = 0
    total_time = 0
    torch.cuda.empty_cache()
    torch.cuda.reset_peak_memory_stats()

    model.eval()

    with torch.no_grad():
        for images, labels in testloader:
            images = images.to(device).to(dtype=dtype)
            labels = labels.to(device)

            torch.cuda.synchronize()
            start_mem = torch.cuda.max_memory_allocated()
            start = time.time()

            outputs = model(images)
            
            torch.cuda.synchronize()
            fin_mem = torch.cuda.max_memory_allocated()
            total_time += time.time() - start

            _, preds = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (preds == labels).sum().item()

    acc = correct / total * 100
    print(fin_mem)
    print(start_mem)
    mem = (fin_mem - start_mem) / (1024**2)
    return total_time, acc, mem


model = entrainement()
torch.save(model.state_dict(), "poids.pth")

model.load_state_dict(torch.load("poids.pth"))
model = model.to(device)
t_f32, acc_f32, mem32 = test_inference(model, torch.float32)

model_fp16 = sANN().half().to(device)
model_fp16.load_state_dict(torch.load("poids.pth"))
t_f16, acc_f16, mem16 = test_inference(model_fp16, torch.float16)




print(f"forward F_32 : {t_f32:.4f} s | Acc : {acc_f32:.2f}% | Memory : {mem32:.2f} MB")
print(f"forward F_16 : {t_f16:.4f} s | Acc : {acc_f16:.2f}% | Memory : {mem16:.2f} MB")
